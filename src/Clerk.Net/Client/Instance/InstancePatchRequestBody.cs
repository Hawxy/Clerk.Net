// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Clerk.Net.Client.Instance
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    #pragma warning disable CS1591
    public partial class InstancePatchRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>For browser-like stacks such as browser extensions, Electron, or Capacitor.js the instance allowed origins need to be updated with the request origin value.For Chrome extensions popup, background, or service worker pages the origin is chrome-extension://extension_uiid. For Electron apps the default origin is http://localhost:3000. For Capacitor, the origin is capacitor://localhost.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AllowedOrigins { get; set; }
#nullable restore
#else
        public List<string> AllowedOrigins { get; set; }
#endif
        /// <summary>The clerk_js_version property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClerkJsVersion { get; set; }
#nullable restore
#else
        public string ClerkJsVersion { get; set; }
#endif
        /// <summary>Whether the instance should operate in cookieless development mode (i.e. without third-party cookies).Deprecated: Please use `url_based_session_syncing` instead.</summary>
        [Obsolete("")]
        public bool? CookielessDev { get; set; }
        /// <summary>The development_origin property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DevelopmentOrigin { get; set; }
#nullable restore
#else
        public string DevelopmentOrigin { get; set; }
#endif
        /// <summary>The &quot;enhanced_email_deliverability&quot; feature will send emails from &quot;verifications@clerk.dev&quot; instead of your domain.This can be helpful if you do not have a high domain reputation.</summary>
        public bool? EnhancedEmailDeliverability { get; set; }
        /// <summary>Whether the instance should be using the HIBP service to check passwords for breaches</summary>
        public bool? Hibp { get; set; }
        /// <summary>The support_email property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SupportEmail { get; set; }
#nullable restore
#else
        public string SupportEmail { get; set; }
#endif
        /// <summary>Toggles test mode for this instance, allowing the use of test email addresses and phone numbers.Defaults to true for development instances.</summary>
        public bool? TestMode { get; set; }
        /// <summary>Whether the instance should use URL-based session syncing in development mode (i.e. without third-party cookies).</summary>
        public bool? UrlBasedSessionSyncing { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Clerk.Net.Client.Instance.InstancePatchRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Clerk.Net.Client.Instance.InstancePatchRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Clerk.Net.Client.Instance.InstancePatchRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allowed_origins", n => { AllowedOrigins = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "clerk_js_version", n => { ClerkJsVersion = n.GetStringValue(); } },
                { "cookieless_dev", n => { CookielessDev = n.GetBoolValue(); } },
                { "development_origin", n => { DevelopmentOrigin = n.GetStringValue(); } },
                { "enhanced_email_deliverability", n => { EnhancedEmailDeliverability = n.GetBoolValue(); } },
                { "hibp", n => { Hibp = n.GetBoolValue(); } },
                { "support_email", n => { SupportEmail = n.GetStringValue(); } },
                { "test_mode", n => { TestMode = n.GetBoolValue(); } },
                { "url_based_session_syncing", n => { UrlBasedSessionSyncing = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("allowed_origins", AllowedOrigins);
            writer.WriteStringValue("clerk_js_version", ClerkJsVersion);
            writer.WriteBoolValue("cookieless_dev", CookielessDev);
            writer.WriteStringValue("development_origin", DevelopmentOrigin);
            writer.WriteBoolValue("enhanced_email_deliverability", EnhancedEmailDeliverability);
            writer.WriteBoolValue("hibp", Hibp);
            writer.WriteStringValue("support_email", SupportEmail);
            writer.WriteBoolValue("test_mode", TestMode);
            writer.WriteBoolValue("url_based_session_syncing", UrlBasedSessionSyncing);
        }
    }
}
