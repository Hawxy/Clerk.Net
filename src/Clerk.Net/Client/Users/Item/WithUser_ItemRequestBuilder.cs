// <auto-generated/>
using Clerk.Net.Client.Models;
using Clerk.Net.Client.Users.Item.Ban;
using Clerk.Net.Client.Users.Item.Lock;
using Clerk.Net.Client.Users.Item.Metadata;
using Clerk.Net.Client.Users.Item.Mfa;
using Clerk.Net.Client.Users.Item.Oauth_access_tokens;
using Clerk.Net.Client.Users.Item.Organization_memberships;
using Clerk.Net.Client.Users.Item.Profile_image;
using Clerk.Net.Client.Users.Item.Unban;
using Clerk.Net.Client.Users.Item.Unlock;
using Clerk.Net.Client.Users.Item.Verify_password;
using Clerk.Net.Client.Users.Item.Verify_totp;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Clerk.Net.Client.Users.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \users\{user_id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    public partial class WithUser_ItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The ban property</summary>
        public global::Clerk.Net.Client.Users.Item.Ban.BanRequestBuilder Ban
        {
            get => new global::Clerk.Net.Client.Users.Item.Ban.BanRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The lock property</summary>
        public global::Clerk.Net.Client.Users.Item.Lock.LockRequestBuilder Lock
        {
            get => new global::Clerk.Net.Client.Users.Item.Lock.LockRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The metadata property</summary>
        public global::Clerk.Net.Client.Users.Item.Metadata.MetadataRequestBuilder Metadata
        {
            get => new global::Clerk.Net.Client.Users.Item.Metadata.MetadataRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The mfa property</summary>
        public global::Clerk.Net.Client.Users.Item.Mfa.MfaRequestBuilder Mfa
        {
            get => new global::Clerk.Net.Client.Users.Item.Mfa.MfaRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The oauth_access_tokens property</summary>
        public global::Clerk.Net.Client.Users.Item.Oauth_access_tokens.Oauth_access_tokensRequestBuilder Oauth_access_tokens
        {
            get => new global::Clerk.Net.Client.Users.Item.Oauth_access_tokens.Oauth_access_tokensRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The organization_memberships property</summary>
        public global::Clerk.Net.Client.Users.Item.Organization_memberships.Organization_membershipsRequestBuilder Organization_memberships
        {
            get => new global::Clerk.Net.Client.Users.Item.Organization_memberships.Organization_membershipsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The profile_image property</summary>
        public global::Clerk.Net.Client.Users.Item.Profile_image.Profile_imageRequestBuilder Profile_image
        {
            get => new global::Clerk.Net.Client.Users.Item.Profile_image.Profile_imageRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The unban property</summary>
        public global::Clerk.Net.Client.Users.Item.Unban.UnbanRequestBuilder Unban
        {
            get => new global::Clerk.Net.Client.Users.Item.Unban.UnbanRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The unlock property</summary>
        public global::Clerk.Net.Client.Users.Item.Unlock.UnlockRequestBuilder Unlock
        {
            get => new global::Clerk.Net.Client.Users.Item.Unlock.UnlockRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The verify_password property</summary>
        public global::Clerk.Net.Client.Users.Item.Verify_password.Verify_passwordRequestBuilder Verify_password
        {
            get => new global::Clerk.Net.Client.Users.Item.Verify_password.Verify_passwordRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The verify_totp property</summary>
        public global::Clerk.Net.Client.Users.Item.Verify_totp.Verify_totpRequestBuilder Verify_totp
        {
            get => new global::Clerk.Net.Client.Users.Item.Verify_totp.Verify_totpRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Clerk.Net.Client.Users.Item.WithUser_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithUser_ItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/users/{user_id}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Clerk.Net.Client.Users.Item.WithUser_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithUser_ItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/users/{user_id}", rawUrl)
        {
        }
        /// <summary>
        /// Delete the specified user
        /// </summary>
        /// <returns>A <see cref="global::Clerk.Net.Client.Models.DeletedObject"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Clerk.Net.Client.Models.ClerkErrors">When receiving a 400 status code</exception>
        /// <exception cref="global::Clerk.Net.Client.Models.ClerkErrors">When receiving a 401 status code</exception>
        /// <exception cref="global::Clerk.Net.Client.Models.ClerkErrors">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Clerk.Net.Client.Models.DeletedObject?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Clerk.Net.Client.Models.DeletedObject> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Clerk.Net.Client.Models.ClerkErrors.CreateFromDiscriminatorValue },
                { "401", global::Clerk.Net.Client.Models.ClerkErrors.CreateFromDiscriminatorValue },
                { "404", global::Clerk.Net.Client.Models.ClerkErrors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Clerk.Net.Client.Models.DeletedObject>(requestInfo, global::Clerk.Net.Client.Models.DeletedObject.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve the details of a user
        /// </summary>
        /// <returns>A <see cref="global::Clerk.Net.Client.Models.User"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Clerk.Net.Client.Models.ClerkErrors">When receiving a 400 status code</exception>
        /// <exception cref="global::Clerk.Net.Client.Models.ClerkErrors">When receiving a 401 status code</exception>
        /// <exception cref="global::Clerk.Net.Client.Models.ClerkErrors">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Clerk.Net.Client.Models.User?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Clerk.Net.Client.Models.User> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Clerk.Net.Client.Models.ClerkErrors.CreateFromDiscriminatorValue },
                { "401", global::Clerk.Net.Client.Models.ClerkErrors.CreateFromDiscriminatorValue },
                { "404", global::Clerk.Net.Client.Models.ClerkErrors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Clerk.Net.Client.Models.User>(requestInfo, global::Clerk.Net.Client.Models.User.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update a user&apos;s attributes.You can set the user&apos;s primary contact identifiers (email address and phone numbers) by updating the `primary_email_address_id` and `primary_phone_number_id` attributes respectively.Both IDs should correspond to verified identifications that belong to the user.You can remove a user&apos;s username by setting the username attribute to null or the blank string &quot;&quot;.This is a destructive action; the identification will be deleted forever.Usernames can be removed only if they are optional in your instance settings and there&apos;s at least one other identifier which can be used for authentication.This endpoint allows changing a user&apos;s password. When passing the `password` parameter directly you have two further options.You can ignore the password policy checks for your instance by setting the `skip_password_checks` parameter to `true`.You can also choose to sign the user out of all their active sessions on any device once the password is updated. Just set `sign_out_of_other_sessions` to `true`.
        /// </summary>
        /// <returns>A <see cref="global::Clerk.Net.Client.Models.User"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Clerk.Net.Client.Models.ClerkErrors">When receiving a 400 status code</exception>
        /// <exception cref="global::Clerk.Net.Client.Models.ClerkErrors">When receiving a 401 status code</exception>
        /// <exception cref="global::Clerk.Net.Client.Models.ClerkErrors">When receiving a 404 status code</exception>
        /// <exception cref="global::Clerk.Net.Client.Models.ClerkErrors">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Clerk.Net.Client.Models.User?> PatchAsync(global::Clerk.Net.Client.Users.Item.WithUser_PatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Clerk.Net.Client.Models.User> PatchAsync(global::Clerk.Net.Client.Users.Item.WithUser_PatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Clerk.Net.Client.Models.ClerkErrors.CreateFromDiscriminatorValue },
                { "401", global::Clerk.Net.Client.Models.ClerkErrors.CreateFromDiscriminatorValue },
                { "404", global::Clerk.Net.Client.Models.ClerkErrors.CreateFromDiscriminatorValue },
                { "422", global::Clerk.Net.Client.Models.ClerkErrors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Clerk.Net.Client.Models.User>(requestInfo, global::Clerk.Net.Client.Models.User.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete the specified user
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Retrieve the details of a user
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update a user&apos;s attributes.You can set the user&apos;s primary contact identifiers (email address and phone numbers) by updating the `primary_email_address_id` and `primary_phone_number_id` attributes respectively.Both IDs should correspond to verified identifications that belong to the user.You can remove a user&apos;s username by setting the username attribute to null or the blank string &quot;&quot;.This is a destructive action; the identification will be deleted forever.Usernames can be removed only if they are optional in your instance settings and there&apos;s at least one other identifier which can be used for authentication.This endpoint allows changing a user&apos;s password. When passing the `password` parameter directly you have two further options.You can ignore the password policy checks for your instance by setting the `skip_password_checks` parameter to `true`.You can also choose to sign the user out of all their active sessions on any device once the password is updated. Just set `sign_out_of_other_sessions` to `true`.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Clerk.Net.Client.Users.Item.WithUser_PatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Clerk.Net.Client.Users.Item.WithUser_PatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Clerk.Net.Client.Users.Item.WithUser_ItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Clerk.Net.Client.Users.Item.WithUser_ItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Clerk.Net.Client.Users.Item.WithUser_ItemRequestBuilder(rawUrl, RequestAdapter);
        }
    }
}
