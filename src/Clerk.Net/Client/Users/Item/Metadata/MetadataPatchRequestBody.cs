// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Clerk.Net.Client.Users.Item.Metadata {
    public class MetadataPatchRequestBody : IParsable {
        /// <summary>Metadata saved on the user that is only visible to your backend.The new object will be merged with the existing value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MetadataPatchRequestBody_private_metadata? PrivateMetadata { get; set; }
#nullable restore
#else
        public MetadataPatchRequestBody_private_metadata PrivateMetadata { get; set; }
#endif
        /// <summary>Metadata saved on the user, that is visible to both your frontend and backend.The new object will be merged with the existing value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MetadataPatchRequestBody_public_metadata? PublicMetadata { get; set; }
#nullable restore
#else
        public MetadataPatchRequestBody_public_metadata PublicMetadata { get; set; }
#endif
        /// <summary>Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.The new object will be merged with the existing value.Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MetadataPatchRequestBody_unsafe_metadata? UnsafeMetadata { get; set; }
#nullable restore
#else
        public MetadataPatchRequestBody_unsafe_metadata UnsafeMetadata { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static MetadataPatchRequestBody CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MetadataPatchRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"private_metadata", n => { PrivateMetadata = n.GetObjectValue<MetadataPatchRequestBody_private_metadata>(MetadataPatchRequestBody_private_metadata.CreateFromDiscriminatorValue); } },
                {"public_metadata", n => { PublicMetadata = n.GetObjectValue<MetadataPatchRequestBody_public_metadata>(MetadataPatchRequestBody_public_metadata.CreateFromDiscriminatorValue); } },
                {"unsafe_metadata", n => { UnsafeMetadata = n.GetObjectValue<MetadataPatchRequestBody_unsafe_metadata>(MetadataPatchRequestBody_unsafe_metadata.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<MetadataPatchRequestBody_private_metadata>("private_metadata", PrivateMetadata);
            writer.WriteObjectValue<MetadataPatchRequestBody_public_metadata>("public_metadata", PublicMetadata);
            writer.WriteObjectValue<MetadataPatchRequestBody_unsafe_metadata>("unsafe_metadata", UnsafeMetadata);
        }
    }
}
