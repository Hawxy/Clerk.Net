// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Clerk.Net.Client.Users
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UsersPostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>If Backup Codes are configured on the instance, you can provide them to enable it on the newly created user without the need to reset them.You must provide the backup codes in plain format or the corresponding bcrypt digest.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? BackupCodes { get; set; }
#nullable restore
#else
        public List<string> BackupCodes { get; set; }
#endif
        /// <summary>A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>If enabled, user can create organizations via FAPI.</summary>
        public bool? CreateOrganizationEnabled { get; set; }
        /// <summary>The maximum number of organizations the user can create. 0 means unlimited.</summary>
        public int? CreateOrganizationsLimit { get; set; }
        /// <summary>If enabled, user can delete themselves via FAPI.</summary>
        public bool? DeleteSelfEnabled { get; set; }
        /// <summary>Email addresses to add to the user.Must be unique across your instance.The first email address will be set as the user&apos;s primary email address.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? EmailAddress { get; set; }
#nullable restore
#else
        public List<string> EmailAddress { get; set; }
#endif
        /// <summary>The ID of the user as used in your external systems or your previous authentication solution.Must be unique across your instance.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalId { get; set; }
#nullable restore
#else
        public string ExternalId { get; set; }
#endif
        /// <summary>The first name to assign to the user</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstName { get; set; }
#nullable restore
#else
        public string FirstName { get; set; }
#endif
        /// <summary>The last name to assign to the user</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastName { get; set; }
#nullable restore
#else
        public string LastName { get; set; }
#endif
        /// <summary>A custom timestamp denoting _when_ the user accepted legal requirements, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LegalAcceptedAt { get; set; }
#nullable restore
#else
        public string LegalAcceptedAt { get; set; }
#endif
        /// <summary>The plaintext password to give the user.Must be at least 8 characters long, and can not be in any list of hacked passwords.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.The digests should be generated with one of the supported algorithms.The hashing algorithm can be specified using the `password_hasher` property.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PasswordDigest { get; set; }
#nullable restore
#else
        public string PasswordDigest { get; set; }
#endif
        /// <summary>The hashing algorithm that was used to generate the password digest.The algorithms we support at the moment are [`bcrypt`](https://en.wikipedia.org/wiki/Bcrypt), [`bcrypt_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/), [`md5`](https://en.wikipedia.org/wiki/MD5), `pbkdf2_sha1`, `pbkdf2_sha256`, [`pbkdf2_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),[`phpass`](https://www.openwall.com/phpass/), [`scrypt_firebase`](https://firebaseopensource.com/projects/firebase/scrypt/),[`scrypt_werkzeug`](https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash), [`sha256`](https://en.wikipedia.org/wiki/SHA-2),and the [`argon2`](https://argon2.online/) variants: `argon2i` and `argon2id`.Each of the supported hashers expects the incoming digest to be in a particular format. See the [Clerk docs](https://clerk.com/docs/references/backend/user/create-user) for more information.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PasswordHasher { get; set; }
#nullable restore
#else
        public string PasswordHasher { get; set; }
#endif
        /// <summary>Phone numbers to add to the user.Must be unique across your instance.The first phone number will be set as the user&apos;s primary phone number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PhoneNumber { get; set; }
#nullable restore
#else
        public List<string> PhoneNumber { get; set; }
#endif
        /// <summary>Metadata saved on the user, that is only visible to your Backend API</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Clerk.Net.Client.Users.UsersPostRequestBody_private_metadata? PrivateMetadata { get; set; }
#nullable restore
#else
        public global::Clerk.Net.Client.Users.UsersPostRequestBody_private_metadata PrivateMetadata { get; set; }
#endif
        /// <summary>Metadata saved on the user, that is visible to both your Frontend and Backend APIs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Clerk.Net.Client.Users.UsersPostRequestBody_public_metadata? PublicMetadata { get; set; }
#nullable restore
#else
        public global::Clerk.Net.Client.Users.UsersPostRequestBody_public_metadata PublicMetadata { get; set; }
#endif
        /// <summary>When set to `true` all legal checks are skipped.It is not recommended to skip legal checks unless you are migrating a user to Clerk.</summary>
        public bool? SkipLegalChecks { get; set; }
        /// <summary>When set to `true` all password checks are skipped.It is recommended to use this method only when migrating plaintext passwords to Clerk.Upon migration the user base should be prompted to pick stronger password.</summary>
        public bool? SkipPasswordChecks { get; set; }
        /// <summary>When set to `true`, `password` is not required anymore when creating the user and can be omitted.This is useful when you are trying to create a user that doesn&apos;t have a password, in an instance that is using passwords.Please note that you cannot use this flag if password is the only way for a user to sign into your instance.</summary>
        public bool? SkipPasswordRequirement { get; set; }
        /// <summary>In case TOTP is configured on the instance, you can provide the secret to enable it on the newly created user without the need to reset it.Please note that currently the supported options are:* Period: 30 seconds* Code length: 6 digits* Algorithm: SHA1</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TotpSecret { get; set; }
#nullable restore
#else
        public string TotpSecret { get; set; }
#endif
        /// <summary>Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Clerk.Net.Client.Users.UsersPostRequestBody_unsafe_metadata? UnsafeMetadata { get; set; }
#nullable restore
#else
        public global::Clerk.Net.Client.Users.UsersPostRequestBody_unsafe_metadata UnsafeMetadata { get; set; }
#endif
        /// <summary>The username to give to the user.It must be unique across your instance.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>Web3 wallets to add to the user.Must be unique across your instance.The first wallet will be set as the user&apos;s primary wallet.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Web3Wallet { get; set; }
#nullable restore
#else
        public List<string> Web3Wallet { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Clerk.Net.Client.Users.UsersPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Clerk.Net.Client.Users.UsersPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Clerk.Net.Client.Users.UsersPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "backup_codes", n => { BackupCodes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "create_organization_enabled", n => { CreateOrganizationEnabled = n.GetBoolValue(); } },
                { "create_organizations_limit", n => { CreateOrganizationsLimit = n.GetIntValue(); } },
                { "created_at", n => { CreatedAt = n.GetStringValue(); } },
                { "delete_self_enabled", n => { DeleteSelfEnabled = n.GetBoolValue(); } },
                { "email_address", n => { EmailAddress = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "external_id", n => { ExternalId = n.GetStringValue(); } },
                { "first_name", n => { FirstName = n.GetStringValue(); } },
                { "last_name", n => { LastName = n.GetStringValue(); } },
                { "legal_accepted_at", n => { LegalAcceptedAt = n.GetStringValue(); } },
                { "password", n => { Password = n.GetStringValue(); } },
                { "password_digest", n => { PasswordDigest = n.GetStringValue(); } },
                { "password_hasher", n => { PasswordHasher = n.GetStringValue(); } },
                { "phone_number", n => { PhoneNumber = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "private_metadata", n => { PrivateMetadata = n.GetObjectValue<global::Clerk.Net.Client.Users.UsersPostRequestBody_private_metadata>(global::Clerk.Net.Client.Users.UsersPostRequestBody_private_metadata.CreateFromDiscriminatorValue); } },
                { "public_metadata", n => { PublicMetadata = n.GetObjectValue<global::Clerk.Net.Client.Users.UsersPostRequestBody_public_metadata>(global::Clerk.Net.Client.Users.UsersPostRequestBody_public_metadata.CreateFromDiscriminatorValue); } },
                { "skip_legal_checks", n => { SkipLegalChecks = n.GetBoolValue(); } },
                { "skip_password_checks", n => { SkipPasswordChecks = n.GetBoolValue(); } },
                { "skip_password_requirement", n => { SkipPasswordRequirement = n.GetBoolValue(); } },
                { "totp_secret", n => { TotpSecret = n.GetStringValue(); } },
                { "unsafe_metadata", n => { UnsafeMetadata = n.GetObjectValue<global::Clerk.Net.Client.Users.UsersPostRequestBody_unsafe_metadata>(global::Clerk.Net.Client.Users.UsersPostRequestBody_unsafe_metadata.CreateFromDiscriminatorValue); } },
                { "username", n => { Username = n.GetStringValue(); } },
                { "web3_wallet", n => { Web3Wallet = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("backup_codes", BackupCodes);
            writer.WriteStringValue("created_at", CreatedAt);
            writer.WriteBoolValue("create_organization_enabled", CreateOrganizationEnabled);
            writer.WriteIntValue("create_organizations_limit", CreateOrganizationsLimit);
            writer.WriteBoolValue("delete_self_enabled", DeleteSelfEnabled);
            writer.WriteCollectionOfPrimitiveValues<string>("email_address", EmailAddress);
            writer.WriteStringValue("external_id", ExternalId);
            writer.WriteStringValue("first_name", FirstName);
            writer.WriteStringValue("last_name", LastName);
            writer.WriteStringValue("legal_accepted_at", LegalAcceptedAt);
            writer.WriteStringValue("password", Password);
            writer.WriteStringValue("password_digest", PasswordDigest);
            writer.WriteStringValue("password_hasher", PasswordHasher);
            writer.WriteCollectionOfPrimitiveValues<string>("phone_number", PhoneNumber);
            writer.WriteObjectValue<global::Clerk.Net.Client.Users.UsersPostRequestBody_private_metadata>("private_metadata", PrivateMetadata);
            writer.WriteObjectValue<global::Clerk.Net.Client.Users.UsersPostRequestBody_public_metadata>("public_metadata", PublicMetadata);
            writer.WriteBoolValue("skip_legal_checks", SkipLegalChecks);
            writer.WriteBoolValue("skip_password_checks", SkipPasswordChecks);
            writer.WriteBoolValue("skip_password_requirement", SkipPasswordRequirement);
            writer.WriteStringValue("totp_secret", TotpSecret);
            writer.WriteObjectValue<global::Clerk.Net.Client.Users.UsersPostRequestBody_unsafe_metadata>("unsafe_metadata", UnsafeMetadata);
            writer.WriteStringValue("username", Username);
            writer.WriteCollectionOfPrimitiveValues<string>("web3_wallet", Web3Wallet);
        }
    }
}
#pragma warning restore CS0618
