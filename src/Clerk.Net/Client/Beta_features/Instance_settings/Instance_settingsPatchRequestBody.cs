// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Clerk.Net.Client.Beta_features.Instance_settings
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    #pragma warning disable CS1591
    public partial class Instance_settingsPatchRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The &quot;enhanced_email_deliverability&quot; feature will send emails from &quot;verifications@clerk.dev&quot; instead of your domain.This can be helpful if you do not have a high domain reputation.</summary>
        public bool? EnhancedEmailDeliverability { get; set; }
        /// <summary>The local part of the email address from which authentication-related emails (e.g. OTP code, magic links) will be sent.Only alphanumeric values are allowed.Note that this value should contain only the local part of the address (e.g. `foo` for `foo@example.com`).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FromEmailAddress { get; set; }
#nullable restore
#else
        public string FromEmailAddress { get; set; }
#endif
        /// <summary>Enable the Progressive Sign Up algorithm. Refer to the [docs](https://clerk.com/docs/upgrade-guides/progressive-sign-up) for more info.</summary>
        public bool? ProgressiveSignUp { get; set; }
        /// <summary>Whether sign up is restricted to email addresses, phone numbers and usernames that are on the allowlist.</summary>
        public bool? RestrictedToAllowlist { get; set; }
        /// <summary>The name of the JWT Template used to augment your session tokens. To disable this, pass an empty string.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SessionTokenTemplate { get; set; }
#nullable restore
#else
        public string SessionTokenTemplate { get; set; }
#endif
        /// <summary>Toggles test mode for this instance, allowing the use of test email addresses and phone numbers.Defaults to true for development instances.</summary>
        public bool? TestMode { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Clerk.Net.Client.Beta_features.Instance_settings.Instance_settingsPatchRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Clerk.Net.Client.Beta_features.Instance_settings.Instance_settingsPatchRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Clerk.Net.Client.Beta_features.Instance_settings.Instance_settingsPatchRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enhanced_email_deliverability", n => { EnhancedEmailDeliverability = n.GetBoolValue(); } },
                { "from_email_address", n => { FromEmailAddress = n.GetStringValue(); } },
                { "progressive_sign_up", n => { ProgressiveSignUp = n.GetBoolValue(); } },
                { "restricted_to_allowlist", n => { RestrictedToAllowlist = n.GetBoolValue(); } },
                { "session_token_template", n => { SessionTokenTemplate = n.GetStringValue(); } },
                { "test_mode", n => { TestMode = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enhanced_email_deliverability", EnhancedEmailDeliverability);
            writer.WriteStringValue("from_email_address", FromEmailAddress);
            writer.WriteBoolValue("progressive_sign_up", ProgressiveSignUp);
            writer.WriteBoolValue("restricted_to_allowlist", RestrictedToAllowlist);
            writer.WriteStringValue("session_token_template", SessionTokenTemplate);
            writer.WriteBoolValue("test_mode", TestMode);
        }
    }
}
