// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Clerk.Net.Client.Organizations.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    #pragma warning disable CS1591
    public partial class WithOrganization_PatchRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>If true, an admin can delete this organization with the Frontend API.</summary>
        public bool? AdminDeleteEnabled { get; set; }
        /// <summary>A custom date/time denoting _when_ the organization was created, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>The maximum number of memberships allowed for this organization</summary>
        public int? MaxAllowedMemberships { get; set; }
        /// <summary>The new name of the organization</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Metadata saved on the organization that is only visible to your backend.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Clerk.Net.Client.Organizations.Item.WithOrganization_PatchRequestBody_private_metadata? PrivateMetadata { get; set; }
#nullable restore
#else
        public global::Clerk.Net.Client.Organizations.Item.WithOrganization_PatchRequestBody_private_metadata PrivateMetadata { get; set; }
#endif
        /// <summary>Metadata saved on the organization, that is visible to both your frontend and backend.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Clerk.Net.Client.Organizations.Item.WithOrganization_PatchRequestBody_public_metadata? PublicMetadata { get; set; }
#nullable restore
#else
        public global::Clerk.Net.Client.Organizations.Item.WithOrganization_PatchRequestBody_public_metadata PublicMetadata { get; set; }
#endif
        /// <summary>The new slug of the organization, which needs to be unique in the instance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Slug { get; set; }
#nullable restore
#else
        public string Slug { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Clerk.Net.Client.Organizations.Item.WithOrganization_PatchRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Clerk.Net.Client.Organizations.Item.WithOrganization_PatchRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Clerk.Net.Client.Organizations.Item.WithOrganization_PatchRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "admin_delete_enabled", n => { AdminDeleteEnabled = n.GetBoolValue(); } },
                { "created_at", n => { CreatedAt = n.GetStringValue(); } },
                { "max_allowed_memberships", n => { MaxAllowedMemberships = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "private_metadata", n => { PrivateMetadata = n.GetObjectValue<global::Clerk.Net.Client.Organizations.Item.WithOrganization_PatchRequestBody_private_metadata>(global::Clerk.Net.Client.Organizations.Item.WithOrganization_PatchRequestBody_private_metadata.CreateFromDiscriminatorValue); } },
                { "public_metadata", n => { PublicMetadata = n.GetObjectValue<global::Clerk.Net.Client.Organizations.Item.WithOrganization_PatchRequestBody_public_metadata>(global::Clerk.Net.Client.Organizations.Item.WithOrganization_PatchRequestBody_public_metadata.CreateFromDiscriminatorValue); } },
                { "slug", n => { Slug = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("admin_delete_enabled", AdminDeleteEnabled);
            writer.WriteStringValue("created_at", CreatedAt);
            writer.WriteIntValue("max_allowed_memberships", MaxAllowedMemberships);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<global::Clerk.Net.Client.Organizations.Item.WithOrganization_PatchRequestBody_private_metadata>("private_metadata", PrivateMetadata);
            writer.WriteObjectValue<global::Clerk.Net.Client.Organizations.Item.WithOrganization_PatchRequestBody_public_metadata>("public_metadata", PublicMetadata);
            writer.WriteStringValue("slug", Slug);
        }
    }
}
