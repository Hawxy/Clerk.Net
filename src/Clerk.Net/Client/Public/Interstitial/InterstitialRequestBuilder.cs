// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Clerk.Net.Client.Public.Interstitial {
    /// <summary>
    /// Builds and executes requests for operations under \public\interstitial
    /// </summary>
    public class InterstitialRequestBuilder : BaseRequestBuilder {
        /// <summary>
        /// Instantiates a new InterstitialRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public InterstitialRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/public/interstitial{?frontendApi*,publishable_key*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new InterstitialRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public InterstitialRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/public/interstitial{?frontendApi*,publishable_key*}", rawUrl) {
        }
        /// <summary>
        /// The Clerk interstitial endpoint serves an html page that loads clerk.js in order to check the user&apos;s authentication state.It is used by Clerk SDKs when the user&apos;s authentication state cannot be immediately determined.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> GetAsync(Action<RequestConfiguration<InterstitialRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<Stream> GetAsync(Action<RequestConfiguration<InterstitialRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// The Clerk interstitial endpoint serves an html page that loads clerk.js in order to check the user&apos;s authentication state.It is used by Clerk SDKs when the user&apos;s authentication state cannot be immediately determined.
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<InterstitialRequestBuilderGetQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<InterstitialRequestBuilderGetQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation {
                HttpMethod = Method.GET,
                UrlTemplate = UrlTemplate,
                PathParameters = PathParameters,
            };
            if (requestConfiguration != null) {
                var requestConfig = new RequestConfiguration<InterstitialRequestBuilderGetQueryParameters>();
                requestConfiguration.Invoke(requestConfig);
                requestInfo.AddQueryParameters(requestConfig.QueryParameters);
                requestInfo.AddRequestOptions(requestConfig.Options);
                requestInfo.AddHeaders(requestConfig.Headers);
            }
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public InterstitialRequestBuilder WithUrl(string rawUrl) {
            return new InterstitialRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// The Clerk interstitial endpoint serves an html page that loads clerk.js in order to check the user&apos;s authentication state.It is used by Clerk SDKs when the user&apos;s authentication state cannot be immediately determined.
        /// </summary>
        public class InterstitialRequestBuilderGetQueryParameters {
            /// <summary>The Frontend API key of your instance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("frontendApi")]
            public string? FrontendApi { get; set; }
#nullable restore
#else
            [QueryParameter("frontendApi")]
            public string FrontendApi { get; set; }
#endif
            /// <summary>The publishable key of your instance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("publishable_key")]
            public string? PublishableKey { get; set; }
#nullable restore
#else
            [QueryParameter("publishable_key")]
            public string PublishableKey { get; set; }
#endif
        }
    }
}
