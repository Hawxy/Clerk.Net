// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Clerk.Net.Client.Models
{
    /// <summary>
    /// An organization domain
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class OrganizationDomain : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Affiliation email address for the domain, if available.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AffiliationEmailAddress { get; set; }
#nullable restore
#else
        public string AffiliationEmailAddress { get; set; }
#endif
        /// <summary>Unix timestamp when the domain was created</summary>
        public long? CreatedAt { get; set; }
        /// <summary>Mode of enrollment for the domain</summary>
        public global::Clerk.Net.Client.Models.OrganizationDomain_enrollment_mode? EnrollmentMode { get; set; }
        /// <summary>Unique identifier for the organization domain</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Name of the organization domain</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value. Always `organization_domain`</summary>
        public global::Clerk.Net.Client.Models.OrganizationDomain_object? Object { get; set; }
        /// <summary>Unique identifier for the organization</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrganizationId { get; set; }
#nullable restore
#else
        public string OrganizationId { get; set; }
#endif
        /// <summary>Total number of pending invitations associated with this domain</summary>
        public int? TotalPendingInvitations { get; set; }
        /// <summary>Total number of pending suggestions associated with this domain</summary>
        public int? TotalPendingSuggestions { get; set; }
        /// <summary>Unix timestamp of the last update to the domain</summary>
        public long? UpdatedAt { get; set; }
        /// <summary>Verification details for the domain</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Clerk.Net.Client.Models.OrganizationDomain_verification? Verification { get; set; }
#nullable restore
#else
        public global::Clerk.Net.Client.Models.OrganizationDomain_verification Verification { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Clerk.Net.Client.Models.OrganizationDomain"/> and sets the default values.
        /// </summary>
        public OrganizationDomain()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Clerk.Net.Client.Models.OrganizationDomain"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Clerk.Net.Client.Models.OrganizationDomain CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Clerk.Net.Client.Models.OrganizationDomain();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "affiliation_email_address", n => { AffiliationEmailAddress = n.GetStringValue(); } },
                { "created_at", n => { CreatedAt = n.GetLongValue(); } },
                { "enrollment_mode", n => { EnrollmentMode = n.GetEnumValue<global::Clerk.Net.Client.Models.OrganizationDomain_enrollment_mode>(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Clerk.Net.Client.Models.OrganizationDomain_object>(); } },
                { "organization_id", n => { OrganizationId = n.GetStringValue(); } },
                { "total_pending_invitations", n => { TotalPendingInvitations = n.GetIntValue(); } },
                { "total_pending_suggestions", n => { TotalPendingSuggestions = n.GetIntValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetLongValue(); } },
                { "verification", n => { Verification = n.GetObjectValue<global::Clerk.Net.Client.Models.OrganizationDomain_verification>(global::Clerk.Net.Client.Models.OrganizationDomain_verification.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("affiliation_email_address", AffiliationEmailAddress);
            writer.WriteLongValue("created_at", CreatedAt);
            writer.WriteEnumValue<global::Clerk.Net.Client.Models.OrganizationDomain_enrollment_mode>("enrollment_mode", EnrollmentMode);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<global::Clerk.Net.Client.Models.OrganizationDomain_object>("object", Object);
            writer.WriteStringValue("organization_id", OrganizationId);
            writer.WriteIntValue("total_pending_invitations", TotalPendingInvitations);
            writer.WriteIntValue("total_pending_suggestions", TotalPendingSuggestions);
            writer.WriteLongValue("updated_at", UpdatedAt);
            writer.WriteObjectValue<global::Clerk.Net.Client.Models.OrganizationDomain_verification>("verification", Verification);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
