// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Clerk.Net.Client.Models {
    public class InstanceRestrictions : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The allowlist property</summary>
        public bool? Allowlist { get; set; }
        /// <summary>The block_email_subaddresses property</summary>
        public bool? BlockEmailSubaddresses { get; set; }
        /// <summary>The blocklist property</summary>
        public bool? Blocklist { get; set; }
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public InstanceRestrictions_object? Object { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="InstanceRestrictions"/> and sets the default values.
        /// </summary>
        public InstanceRestrictions() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="InstanceRestrictions"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static InstanceRestrictions CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new InstanceRestrictions();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"allowlist", n => { Allowlist = n.GetBoolValue(); } },
                {"block_email_subaddresses", n => { BlockEmailSubaddresses = n.GetBoolValue(); } },
                {"blocklist", n => { Blocklist = n.GetBoolValue(); } },
                {"object", n => { Object = n.GetEnumValue<InstanceRestrictions_object>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("allowlist", Allowlist);
            writer.WriteBoolValue("block_email_subaddresses", BlockEmailSubaddresses);
            writer.WriteBoolValue("blocklist", Blocklist);
            writer.WriteEnumValue<InstanceRestrictions_object>("object", Object);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
