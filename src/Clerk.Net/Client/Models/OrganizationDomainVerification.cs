// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Clerk.Net.Client.Models
{
    /// <summary>
    /// The verification object from an organization domain
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class OrganizationDomainVerification : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>How many attempts have been made to verify the domain</summary>
        public int? Attempts { get; set; }
        /// <summary>Unix timestamp of when the verification will expire</summary>
        public long? ExpireAt { get; set; }
        /// <summary>Status of the verification. It can be `unverified` or `verified`</summary>
        public global::Clerk.Net.Client.Models.OrganizationDomainVerification_status? Status { get; set; }
        /// <summary>Name of the strategy used to verify the domain</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Strategy { get; set; }
#nullable restore
#else
        public string Strategy { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Clerk.Net.Client.Models.OrganizationDomainVerification"/> and sets the default values.
        /// </summary>
        public OrganizationDomainVerification()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Clerk.Net.Client.Models.OrganizationDomainVerification"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Clerk.Net.Client.Models.OrganizationDomainVerification CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Clerk.Net.Client.Models.OrganizationDomainVerification();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "attempts", n => { Attempts = n.GetIntValue(); } },
                { "expire_at", n => { ExpireAt = n.GetLongValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Clerk.Net.Client.Models.OrganizationDomainVerification_status>(); } },
                { "strategy", n => { Strategy = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("attempts", Attempts);
            writer.WriteLongValue("expire_at", ExpireAt);
            writer.WriteEnumValue<global::Clerk.Net.Client.Models.OrganizationDomainVerification_status>("status", Status);
            writer.WriteStringValue("strategy", Strategy);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
