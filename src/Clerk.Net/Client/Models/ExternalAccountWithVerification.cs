// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Clerk.Net.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ExternalAccountWithVerification : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The approved_scopes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApprovedScopes { get; set; }
#nullable restore
#else
        public string ApprovedScopes { get; set; }
#endif
        /// <summary>Please use `image_url` instead</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AvatarUrl { get; set; }
#nullable restore
#else
        public string AvatarUrl { get; set; }
#endif
        /// <summary>Unix timestamp of creation</summary>
        public long? CreatedAt { get; set; }
        /// <summary>The email_address property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailAddress { get; set; }
#nullable restore
#else
        public string EmailAddress { get; set; }
#endif
        /// <summary>The first_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstName { get; set; }
#nullable restore
#else
        public string FirstName { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The identification_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IdentificationId { get; set; }
#nullable restore
#else
        public string IdentificationId { get; set; }
#endif
        /// <summary>The image_url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageUrl { get; set; }
#nullable restore
#else
        public string ImageUrl { get; set; }
#endif
        /// <summary>The label property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Label { get; set; }
#nullable restore
#else
        public string Label { get; set; }
#endif
        /// <summary>The last_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastName { get; set; }
#nullable restore
#else
        public string LastName { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Clerk.Net.Client.Models.ExternalAccountWithVerification_object? Object { get; set; }
        /// <summary>The phone_number property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PhoneNumber { get; set; }
#nullable restore
#else
        public string PhoneNumber { get; set; }
#endif
        /// <summary>The provider property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Provider { get; set; }
#nullable restore
#else
        public string Provider { get; set; }
#endif
        /// <summary>The unique ID of the user in the external provider&apos;s system</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProviderUserId { get; set; }
#nullable restore
#else
        public string ProviderUserId { get; set; }
#endif
        /// <summary>The public_metadata property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Clerk.Net.Client.Models.ExternalAccountWithVerification_public_metadata? PublicMetadata { get; set; }
#nullable restore
#else
        public global::Clerk.Net.Client.Models.ExternalAccountWithVerification_public_metadata PublicMetadata { get; set; }
#endif
        /// <summary>Unix timestamp of creation</summary>
        public long? UpdatedAt { get; set; }
        /// <summary>The username property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>The verification property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Clerk.Net.Client.Models.ExternalAccountWithVerification.ExternalAccountWithVerification_verification? Verification { get; set; }
#nullable restore
#else
        public global::Clerk.Net.Client.Models.ExternalAccountWithVerification.ExternalAccountWithVerification_verification Verification { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Clerk.Net.Client.Models.ExternalAccountWithVerification"/> and sets the default values.
        /// </summary>
        public ExternalAccountWithVerification()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Clerk.Net.Client.Models.ExternalAccountWithVerification"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Clerk.Net.Client.Models.ExternalAccountWithVerification CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Clerk.Net.Client.Models.ExternalAccountWithVerification();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "approved_scopes", n => { ApprovedScopes = n.GetStringValue(); } },
                { "avatar_url", n => { AvatarUrl = n.GetStringValue(); } },
                { "created_at", n => { CreatedAt = n.GetLongValue(); } },
                { "email_address", n => { EmailAddress = n.GetStringValue(); } },
                { "first_name", n => { FirstName = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "identification_id", n => { IdentificationId = n.GetStringValue(); } },
                { "image_url", n => { ImageUrl = n.GetStringValue(); } },
                { "label", n => { Label = n.GetStringValue(); } },
                { "last_name", n => { LastName = n.GetStringValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Clerk.Net.Client.Models.ExternalAccountWithVerification_object>(); } },
                { "phone_number", n => { PhoneNumber = n.GetStringValue(); } },
                { "provider", n => { Provider = n.GetStringValue(); } },
                { "provider_user_id", n => { ProviderUserId = n.GetStringValue(); } },
                { "public_metadata", n => { PublicMetadata = n.GetObjectValue<global::Clerk.Net.Client.Models.ExternalAccountWithVerification_public_metadata>(global::Clerk.Net.Client.Models.ExternalAccountWithVerification_public_metadata.CreateFromDiscriminatorValue); } },
                { "updated_at", n => { UpdatedAt = n.GetLongValue(); } },
                { "username", n => { Username = n.GetStringValue(); } },
                { "verification", n => { Verification = n.GetObjectValue<global::Clerk.Net.Client.Models.ExternalAccountWithVerification.ExternalAccountWithVerification_verification>(global::Clerk.Net.Client.Models.ExternalAccountWithVerification.ExternalAccountWithVerification_verification.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("approved_scopes", ApprovedScopes);
            writer.WriteStringValue("avatar_url", AvatarUrl);
            writer.WriteLongValue("created_at", CreatedAt);
            writer.WriteStringValue("email_address", EmailAddress);
            writer.WriteStringValue("first_name", FirstName);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("identification_id", IdentificationId);
            writer.WriteStringValue("image_url", ImageUrl);
            writer.WriteStringValue("label", Label);
            writer.WriteStringValue("last_name", LastName);
            writer.WriteEnumValue<global::Clerk.Net.Client.Models.ExternalAccountWithVerification_object>("object", Object);
            writer.WriteStringValue("phone_number", PhoneNumber);
            writer.WriteStringValue("provider", Provider);
            writer.WriteStringValue("provider_user_id", ProviderUserId);
            writer.WriteObjectValue<global::Clerk.Net.Client.Models.ExternalAccountWithVerification_public_metadata>("public_metadata", PublicMetadata);
            writer.WriteLongValue("updated_at", UpdatedAt);
            writer.WriteStringValue("username", Username);
            writer.WriteObjectValue<global::Clerk.Net.Client.Models.ExternalAccountWithVerification.ExternalAccountWithVerification_verification>("verification", Verification);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Clerk.Net.Client.Models.GoogleOneTap"/>, <see cref="global::Clerk.Net.Client.Models.Oauth"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ExternalAccountWithVerification_verification : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Clerk.Net.Client.Models.GoogleOneTap"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Clerk.Net.Client.Models.GoogleOneTap? GoogleOneTap { get; set; }
#nullable restore
#else
            public global::Clerk.Net.Client.Models.GoogleOneTap GoogleOneTap { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Clerk.Net.Client.Models.Oauth"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Clerk.Net.Client.Models.Oauth? Oauth { get; set; }
#nullable restore
#else
            public global::Clerk.Net.Client.Models.Oauth Oauth { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Clerk.Net.Client.Models.ExternalAccountWithVerification.ExternalAccountWithVerification_verification"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Clerk.Net.Client.Models.ExternalAccountWithVerification.ExternalAccountWithVerification_verification CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Clerk.Net.Client.Models.ExternalAccountWithVerification.ExternalAccountWithVerification_verification();
                if("GoogleOneTap".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.GoogleOneTap = new global::Clerk.Net.Client.Models.GoogleOneTap();
                }
                else if("Oauth".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.Oauth = new global::Clerk.Net.Client.Models.Oauth();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(GoogleOneTap != null)
                {
                    return GoogleOneTap.GetFieldDeserializers();
                }
                else if(Oauth != null)
                {
                    return Oauth.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(GoogleOneTap != null)
                {
                    writer.WriteObjectValue<global::Clerk.Net.Client.Models.GoogleOneTap>(null, GoogleOneTap);
                }
                else if(Oauth != null)
                {
                    writer.WriteObjectValue<global::Clerk.Net.Client.Models.Oauth>(null, Oauth);
                }
            }
        }
    }
}
#pragma warning restore CS0618
