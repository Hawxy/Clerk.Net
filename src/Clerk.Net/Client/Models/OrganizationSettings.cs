// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Clerk.Net.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    #pragma warning disable CS1591
    public partial class OrganizationSettings : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The default for whether an admin can delete an organization with the Frontend API.</summary>
        public bool? AdminDeleteEnabled { get; set; }
        /// <summary>The role key that a user will be assigned after creating an organization.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatorRole { get; set; }
#nullable restore
#else
        public string CreatorRole { get; set; }
#endif
        /// <summary>The role key that it will be used in order to create an organization invitation or suggestion.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DomainsDefaultRole { get; set; }
#nullable restore
#else
        public string DomainsDefaultRole { get; set; }
#endif
        /// <summary>The domains_enabled property</summary>
        public bool? DomainsEnabled { get; set; }
        /// <summary>The domains_enrollment_modes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Clerk.Net.Client.Models.OrganizationSettings_domains_enrollment_modes?>? DomainsEnrollmentModes { get; set; }
#nullable restore
#else
        public List<global::Clerk.Net.Client.Models.OrganizationSettings_domains_enrollment_modes?> DomainsEnrollmentModes { get; set; }
#endif
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The max_allowed_memberships property</summary>
        public int? MaxAllowedMemberships { get; set; }
        /// <summary>The max_allowed_permissions property</summary>
        public int? MaxAllowedPermissions { get; set; }
        /// <summary>The max_allowed_roles property</summary>
        public int? MaxAllowedRoles { get; set; }
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Clerk.Net.Client.Models.OrganizationSettings_object? Object { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Clerk.Net.Client.Models.OrganizationSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Clerk.Net.Client.Models.OrganizationSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Clerk.Net.Client.Models.OrganizationSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "admin_delete_enabled", n => { AdminDeleteEnabled = n.GetBoolValue(); } },
                { "creator_role", n => { CreatorRole = n.GetStringValue(); } },
                { "domains_default_role", n => { DomainsDefaultRole = n.GetStringValue(); } },
                { "domains_enabled", n => { DomainsEnabled = n.GetBoolValue(); } },
                { "domains_enrollment_modes", n => { DomainsEnrollmentModes = n.GetCollectionOfEnumValues<global::Clerk.Net.Client.Models.OrganizationSettings_domains_enrollment_modes>()?.AsList(); } },
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "max_allowed_memberships", n => { MaxAllowedMemberships = n.GetIntValue(); } },
                { "max_allowed_permissions", n => { MaxAllowedPermissions = n.GetIntValue(); } },
                { "max_allowed_roles", n => { MaxAllowedRoles = n.GetIntValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Clerk.Net.Client.Models.OrganizationSettings_object>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("admin_delete_enabled", AdminDeleteEnabled);
            writer.WriteStringValue("creator_role", CreatorRole);
            writer.WriteStringValue("domains_default_role", DomainsDefaultRole);
            writer.WriteBoolValue("domains_enabled", DomainsEnabled);
            writer.WriteCollectionOfEnumValues<global::Clerk.Net.Client.Models.OrganizationSettings_domains_enrollment_modes>("domains_enrollment_modes", DomainsEnrollmentModes);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteIntValue("max_allowed_memberships", MaxAllowedMemberships);
            writer.WriteIntValue("max_allowed_permissions", MaxAllowedPermissions);
            writer.WriteIntValue("max_allowed_roles", MaxAllowedRoles);
            writer.WriteEnumValue<global::Clerk.Net.Client.Models.OrganizationSettings_object>("object", Object);
        }
    }
}
