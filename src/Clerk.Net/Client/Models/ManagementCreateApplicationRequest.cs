// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Clerk.Net.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ManagementCreateApplicationRequest : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>List of add-on IDs (e.g., [&quot;enhanced_auth_2023_11&quot;, &quot;enhanced_orgs_2023_11&quot;]).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AddonIds { get; set; }
#nullable restore
#else
        public List<string> AddonIds { get; set; }
#endif
        /// <summary>List of environment types to create instances for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Clerk.Net.Client.Models.ManagementCreateApplicationRequest_environment_types?>? EnvironmentTypes { get; set; }
#nullable restore
#else
        public List<global::Clerk.Net.Client.Models.ManagementCreateApplicationRequest_environment_types?> EnvironmentTypes { get; set; }
#endif
        /// <summary>Maximum allowed organizations for the application.</summary>
        public int? MaxAllowedOrganizations { get; set; }
        /// <summary>Maximum allowed users for the application.</summary>
        public int? MaxAllowedUsers { get; set; }
        /// <summary>The name of the application.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The owner ID (organization ID) of the application.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OwnerId { get; set; }
#nullable restore
#else
        public string OwnerId { get; set; }
#endif
        /// <summary>Whether the application is paid externally.</summary>
        public bool? PaidExternally { get; set; }
        /// <summary>The plan ID for the application (e.g., &quot;free_2022_06&quot;, &quot;pro_2023_11&quot;).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlanId { get; set; }
#nullable restore
#else
        public string PlanId { get; set; }
#endif
        /// <summary>Subscription metadata for the application.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Clerk.Net.Client.Models.ManagementCreateApplicationRequest_subscription_metadata? SubscriptionMetadata { get; set; }
#nullable restore
#else
        public global::Clerk.Net.Client.Models.ManagementCreateApplicationRequest_subscription_metadata SubscriptionMetadata { get; set; }
#endif
        /// <summary>Whether the application is in test mode.</summary>
        public bool? TestMode { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Clerk.Net.Client.Models.ManagementCreateApplicationRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Clerk.Net.Client.Models.ManagementCreateApplicationRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Clerk.Net.Client.Models.ManagementCreateApplicationRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "addon_ids", n => { AddonIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "environment_types", n => { EnvironmentTypes = n.GetCollectionOfEnumValues<global::Clerk.Net.Client.Models.ManagementCreateApplicationRequest_environment_types>()?.AsList(); } },
                { "max_allowed_organizations", n => { MaxAllowedOrganizations = n.GetIntValue(); } },
                { "max_allowed_users", n => { MaxAllowedUsers = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "owner_id", n => { OwnerId = n.GetStringValue(); } },
                { "paid_externally", n => { PaidExternally = n.GetBoolValue(); } },
                { "plan_id", n => { PlanId = n.GetStringValue(); } },
                { "subscription_metadata", n => { SubscriptionMetadata = n.GetObjectValue<global::Clerk.Net.Client.Models.ManagementCreateApplicationRequest_subscription_metadata>(global::Clerk.Net.Client.Models.ManagementCreateApplicationRequest_subscription_metadata.CreateFromDiscriminatorValue); } },
                { "test_mode", n => { TestMode = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("addon_ids", AddonIds);
            writer.WriteCollectionOfEnumValues<global::Clerk.Net.Client.Models.ManagementCreateApplicationRequest_environment_types>("environment_types", EnvironmentTypes);
            writer.WriteIntValue("max_allowed_organizations", MaxAllowedOrganizations);
            writer.WriteIntValue("max_allowed_users", MaxAllowedUsers);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("owner_id", OwnerId);
            writer.WriteBoolValue("paid_externally", PaidExternally);
            writer.WriteStringValue("plan_id", PlanId);
            writer.WriteObjectValue<global::Clerk.Net.Client.Models.ManagementCreateApplicationRequest_subscription_metadata>("subscription_metadata", SubscriptionMetadata);
            writer.WriteBoolValue("test_mode", TestMode);
        }
    }
}
#pragma warning restore CS0618
