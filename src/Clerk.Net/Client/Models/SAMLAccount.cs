// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Clerk.Net.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    #pragma warning disable CS1591
    public partial class SAMLAccount : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The active property</summary>
        public bool? Active { get; set; }
        /// <summary>The email_address property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailAddress { get; set; }
#nullable restore
#else
        public string EmailAddress { get; set; }
#endif
        /// <summary>The first_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstName { get; set; }
#nullable restore
#else
        public string FirstName { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The last_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastName { get; set; }
#nullable restore
#else
        public string LastName { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Clerk.Net.Client.Models.SAMLAccount_object? Object { get; set; }
        /// <summary>The provider property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Provider { get; set; }
#nullable restore
#else
        public string Provider { get; set; }
#endif
        /// <summary>The provider_user_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProviderUserId { get; set; }
#nullable restore
#else
        public string ProviderUserId { get; set; }
#endif
        /// <summary>The public_metadata property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Clerk.Net.Client.Models.SAMLAccount_public_metadata? PublicMetadata { get; set; }
#nullable restore
#else
        public global::Clerk.Net.Client.Models.SAMLAccount_public_metadata PublicMetadata { get; set; }
#endif
        /// <summary>The verification property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Clerk.Net.Client.Models.SAMLAccount.SAMLAccount_verification? Verification { get; set; }
#nullable restore
#else
        public global::Clerk.Net.Client.Models.SAMLAccount.SAMLAccount_verification Verification { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Clerk.Net.Client.Models.SAMLAccount"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Clerk.Net.Client.Models.SAMLAccount CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Clerk.Net.Client.Models.SAMLAccount();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "active", n => { Active = n.GetBoolValue(); } },
                { "email_address", n => { EmailAddress = n.GetStringValue(); } },
                { "first_name", n => { FirstName = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "last_name", n => { LastName = n.GetStringValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Clerk.Net.Client.Models.SAMLAccount_object>(); } },
                { "provider", n => { Provider = n.GetStringValue(); } },
                { "provider_user_id", n => { ProviderUserId = n.GetStringValue(); } },
                { "public_metadata", n => { PublicMetadata = n.GetObjectValue<global::Clerk.Net.Client.Models.SAMLAccount_public_metadata>(global::Clerk.Net.Client.Models.SAMLAccount_public_metadata.CreateFromDiscriminatorValue); } },
                { "verification", n => { Verification = n.GetObjectValue<global::Clerk.Net.Client.Models.SAMLAccount.SAMLAccount_verification>(global::Clerk.Net.Client.Models.SAMLAccount.SAMLAccount_verification.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("active", Active);
            writer.WriteStringValue("email_address", EmailAddress);
            writer.WriteStringValue("first_name", FirstName);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("last_name", LastName);
            writer.WriteEnumValue<global::Clerk.Net.Client.Models.SAMLAccount_object>("object", Object);
            writer.WriteStringValue("provider", Provider);
            writer.WriteStringValue("provider_user_id", ProviderUserId);
            writer.WriteObjectValue<global::Clerk.Net.Client.Models.SAMLAccount_public_metadata>("public_metadata", PublicMetadata);
            writer.WriteObjectValue<global::Clerk.Net.Client.Models.SAMLAccount.SAMLAccount_verification>("verification", Verification);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Clerk.Net.Client.Models.SAML"/>, <see cref="global::Clerk.Net.Client.Models.Ticket"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
        public partial class SAMLAccount_verification : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Clerk.Net.Client.Models.SAML"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Clerk.Net.Client.Models.SAML? SAML { get; set; }
#nullable restore
#else
            public global::Clerk.Net.Client.Models.SAML SAML { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Clerk.Net.Client.Models.Ticket"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Clerk.Net.Client.Models.Ticket? Ticket { get; set; }
#nullable restore
#else
            public global::Clerk.Net.Client.Models.Ticket Ticket { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Clerk.Net.Client.Models.SAMLAccount.SAMLAccount_verification"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Clerk.Net.Client.Models.SAMLAccount.SAMLAccount_verification CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Clerk.Net.Client.Models.SAMLAccount.SAMLAccount_verification();
                if("SAML".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SAML = new global::Clerk.Net.Client.Models.SAML();
                }
                else if("Ticket".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.Ticket = new global::Clerk.Net.Client.Models.Ticket();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(SAML != null)
                {
                    return SAML.GetFieldDeserializers();
                }
                else if(Ticket != null)
                {
                    return Ticket.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(SAML != null)
                {
                    writer.WriteObjectValue<global::Clerk.Net.Client.Models.SAML>(null, SAML);
                }
                else if(Ticket != null)
                {
                    writer.WriteObjectValue<global::Clerk.Net.Client.Models.Ticket>(null, Ticket);
                }
            }
        }
    }
}
