// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Clerk.Net.Client.Models {
    public class Email : IParsable {
        /// <summary>The body property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Body { get; set; }
#nullable restore
#else
        public string Body { get; set; }
#endif
        /// <summary>The body_plain property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BodyPlain { get; set; }
#nullable restore
#else
        public string BodyPlain { get; set; }
#endif
        /// <summary>The data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Email_data? Data { get; set; }
#nullable restore
#else
        public Email_data Data { get; set; }
#endif
        /// <summary>The delivered_by_clerk property</summary>
        public bool? DeliveredByClerk { get; set; }
        /// <summary>The email_address_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailAddressId { get; set; }
#nullable restore
#else
        public string EmailAddressId { get; set; }
#endif
        /// <summary>The from_email_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FromEmailName { get; set; }
#nullable restore
#else
        public string FromEmailName { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The object property</summary>
        public Email_object? Object { get; set; }
        /// <summary>The slug property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Slug { get; set; }
#nullable restore
#else
        public string Slug { get; set; }
#endif
        /// <summary>The status property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The subject property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subject { get; set; }
#nullable restore
#else
        public string Subject { get; set; }
#endif
        /// <summary>The to_email_address property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ToEmailAddress { get; set; }
#nullable restore
#else
        public string ToEmailAddress { get; set; }
#endif
        /// <summary>The user_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Email CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Email();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"body", n => { Body = n.GetStringValue(); } },
                {"body_plain", n => { BodyPlain = n.GetStringValue(); } },
                {"data", n => { Data = n.GetObjectValue<Email_data>(Email_data.CreateFromDiscriminatorValue); } },
                {"delivered_by_clerk", n => { DeliveredByClerk = n.GetBoolValue(); } },
                {"email_address_id", n => { EmailAddressId = n.GetStringValue(); } },
                {"from_email_name", n => { FromEmailName = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"object", n => { Object = n.GetEnumValue<Email_object>(); } },
                {"slug", n => { Slug = n.GetStringValue(); } },
                {"status", n => { Status = n.GetStringValue(); } },
                {"subject", n => { Subject = n.GetStringValue(); } },
                {"to_email_address", n => { ToEmailAddress = n.GetStringValue(); } },
                {"user_id", n => { UserId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("body", Body);
            writer.WriteStringValue("body_plain", BodyPlain);
            writer.WriteObjectValue<Email_data>("data", Data);
            writer.WriteBoolValue("delivered_by_clerk", DeliveredByClerk);
            writer.WriteStringValue("email_address_id", EmailAddressId);
            writer.WriteStringValue("from_email_name", FromEmailName);
            writer.WriteStringValue("id", Id);
            writer.WriteEnumValue<Email_object>("object", Object);
            writer.WriteStringValue("slug", Slug);
            writer.WriteStringValue("status", Status);
            writer.WriteStringValue("subject", Subject);
            writer.WriteStringValue("to_email_address", ToEmailAddress);
            writer.WriteStringValue("user_id", UserId);
        }
    }
}
