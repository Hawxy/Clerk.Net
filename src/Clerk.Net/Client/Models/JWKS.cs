// <auto-generated/>
#pragma warning disable CS0618
using Clerk.Net.Client.Models.Ed25519;
using Clerk.Net.Client.Models.Symmetric;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Clerk.Net.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class JWKS : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The keys property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Clerk.Net.Client.Models.JWKS.JWKS_keys>? Keys { get; set; }
#nullable restore
#else
        public List<global::Clerk.Net.Client.Models.JWKS.JWKS_keys> Keys { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Clerk.Net.Client.Models.JWKS"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Clerk.Net.Client.Models.JWKS CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Clerk.Net.Client.Models.JWKS();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "keys", n => { Keys = n.GetCollectionOfObjectValues<global::Clerk.Net.Client.Models.JWKS.JWKS_keys>(global::Clerk.Net.Client.Models.JWKS.JWKS_keys.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Clerk.Net.Client.Models.JWKS.JWKS_keys>("keys", Keys);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Clerk.Net.Client.Models.Ed25519.PrivateKey"/>, <see cref="global::Clerk.Net.Client.Models.Ed25519.PublicKey"/>, <see cref="global::Clerk.Net.Client.Models.Symmetric.Key"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class JWKS_keys : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Clerk.Net.Client.Models.Symmetric.Key"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Clerk.Net.Client.Models.Symmetric.Key? Key { get; set; }
#nullable restore
#else
            public global::Clerk.Net.Client.Models.Symmetric.Key Key { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Clerk.Net.Client.Models.Ed25519.PrivateKey"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Clerk.Net.Client.Models.Ed25519.PrivateKey? PrivateKey { get; set; }
#nullable restore
#else
            public global::Clerk.Net.Client.Models.Ed25519.PrivateKey PrivateKey { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Clerk.Net.Client.Models.Ed25519.PublicKey"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Clerk.Net.Client.Models.Ed25519.PublicKey? PublicKey { get; set; }
#nullable restore
#else
            public global::Clerk.Net.Client.Models.Ed25519.PublicKey PublicKey { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Clerk.Net.Client.Models.JWKS.JWKS_keys"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Clerk.Net.Client.Models.JWKS.JWKS_keys CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Clerk.Net.Client.Models.JWKS.JWKS_keys();
                if("JWKS.symmetric.Key".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.Key = new global::Clerk.Net.Client.Models.Symmetric.Key();
                }
                else if("JWKS.ecdsa.PrivateKey".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PrivateKey = new global::Clerk.Net.Client.Models.Ed25519.PrivateKey();
                }
                else if("JWKS.ecdsa.PublicKey".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicKey = new global::Clerk.Net.Client.Models.Ed25519.PublicKey();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Key != null)
                {
                    return Key.GetFieldDeserializers();
                }
                else if(PrivateKey != null)
                {
                    return PrivateKey.GetFieldDeserializers();
                }
                else if(PublicKey != null)
                {
                    return PublicKey.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Key != null)
                {
                    writer.WriteObjectValue<global::Clerk.Net.Client.Models.Symmetric.Key>(null, Key);
                }
                else if(PrivateKey != null)
                {
                    writer.WriteObjectValue<global::Clerk.Net.Client.Models.Ed25519.PrivateKey>(null, PrivateKey);
                }
                else if(PublicKey != null)
                {
                    writer.WriteObjectValue<global::Clerk.Net.Client.Models.Ed25519.PublicKey>(null, PublicKey);
                }
            }
        }
    }
}
#pragma warning restore CS0618
